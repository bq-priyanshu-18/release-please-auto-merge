name: Trunkbased - Main Branch

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  security-events: write
  actions: write
  pull-requests: write
  packages: write

jobs:
  release-version:
    runs-on: ubuntu-latest
    outputs:
      release_prs_created: ${{ steps.release.outputs.prs_created }}
      release_prs: ${{ steps.release.outputs.prs }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Release Please
        uses: google-github-actions/release-please-action@a37ac6e4f6449ce8b3f7607e4d97d0146028dc0b # v4
        id: release
        with:
          token: ${{ github.token }}
          release-type: node
          default-branch: main

      - name: Extract headBranchName
        id: extract_branch_name
        run: |
          HEAD_BRANCH_NAME=$(echo '${{ steps.release.outputs.prs }}' | jq -r '.[0].headBranchName')
          echo "HEAD_BRANCH_NAME=$HEAD_BRANCH_NAME" >> $GITHUB_ENV
          echo "steps name :: $HEAD_BRANCH_NAME"

      - name: Merge Pull Request
        if: steps.release.outputs.prs_created == 'true'
        run: |
          PR_NUMBER=$(gh pr list --state open --head $HEAD_BRANCH_NAME --json number --limit 1 | jq '.[] | .number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr merge $PR_NUMBER --merge --auto --delete-branch
            echo "PR #$PR_NUMBER merged and branch deleted."
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          else
            echo "No PR found to merge."
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Update PR Label
        if: env.PR_NUMBER != ''
        run: |
          gh pr edit $PR_NUMBER --add-label autorelease:tagged
          echo "Label 'autorelease:tagged' added to PR #$PR_NUMBER."
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Get Current Version
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version is $CURRENT_VERSION"

      - name: Calculate Next Version
        id: calculate_version
        run: |
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          # Increment the patch version; adjust this logic based on your versioning strategy
          NEXT_PATCH=$((patch + 1))
          NEXT_VERSION="$major.$minor.$NEXT_PATCH"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "Next version will be $NEXT_VERSION"

      - name: Create Release
        if: env.PR_NUMBER != ''
        run: |
          gh release create "${{ env.NEXT_VERSION }}" --title "Release for PR #$PR_NUMBER" --notes "Release created from PR #$PR_NUMBER"
          echo "Release created for PR #$PR_NUMBER with version ${{ env.NEXT_VERSION }}."
        env:
          GITHUB_TOKEN: ${{ github.token }}